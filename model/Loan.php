<?php
/**
 * Created by PhpStorm.
 * User: Wisdom Emenike
 * Date: 5/9/2020
 * Time: 7:20 PM
 */

namespace model;

use JetBrains\PhpStorm\Pure;
use que\database\interfaces\Builder;
use que\database\model\Model;
use que\utility\money\Item;

class Loan extends Model
{
    protected string $modelKey = 'loanModel';
    protected array $fillable = ['uuid', 'amount', 'tenure', 'interest', 'purpose', 'interest_type', 'note', 'loan_type', 'is_fund_raiser', 'user_id', 'status', 'is_active'];
    protected array $appends = ['absolute_tenure', 'status_readable', 'type', 'loan_type_readable', 'interest_type_readable', 'tenure_readable', 'purpose_readable', 'transaction', 'user', 'is_mine', 'is_granted', 'has_applied'];
    protected array $casts = [
        'note' => 'string', 'id,tenure,interest_type,user_id,status,loan_type' => 'int',
        'interest,amount' => 'double', 'loan_type_readable' => 'func::strtolower',
        'purpose_readable,tenure_readable,interest_type_readable' => 'func::strtolower|str_replace,_, ,:subject|ucfirst',
        'is_active,is_fund_raiser' => 'bool', 'created_at' => 'date:d/m/y'
    ];
    protected array $hidden = ['updated_at'];
    protected array $renames = ['created_at' => 'date'];
    public static array $applied = [];
    public static array $granted = [];

    /**
     * Minimum loan amount
     */
    const MIN_AMOUNT = 5000;

    const PERCENTAGE_INCOME = 25;

    /**
     * Loan status
     */
    const STATUS_PENDING = STATE_PENDING;
    const STATUS_AWAITING = STATE_AWAITING;
    const STATUS_GRANTED = STATE_SUCCESSFUL;
    const STATUS_COMPLETED = STATE_COMPLETED;
    const STATUS_REVOKED = STATE_REVOKED;
    const STATUS_REJECTED = STATE_REJECTED;

    /**
     * Loan types
     */
    const LOAN_TYPE_OFFER = -7;
    const LOAN_TYPE_REQUEST = -8;

    const INTEREST_TYPE_STATIC = 1;
    const INTEREST_TYPE_NON_STATIC = 2;

    /**
     * Loan tenure constants
     */
    const TENURE_ONE_WEEK = -1;
    const TENURE_TWO_WEEKS = -2;
    const TENURE_THREE_WEEKS = -3;
    const TENURE_ONE_MONTH = 1;
    const TENURE_TWO_MONTHS = 2;
    const TENURE_THREE_MONTHS = 3;
    const TENURE_FOUR_MONTHS = 4;
    const TENURE_FIVE_MONTHS = 5;
    const TENURE_SIX_MONTHS = 6;
    const TENURE_SEVEN_MONTHS = 7;
    const TENURE_EIGHT_MONTHS = 8;
    const TENURE_NINE_MONTHS = 9;
    const TENURE_TEN_MONTHS = 10;
    const TENURE_ELEVEN_MONTHS = 11;
    const TENURE_ONE_YEAR = 12;
    const TENURE_ONE_YEAR_AND_SIX_MONTHS = 18;
    const TENURE_TWO_YEARS = 24;
    const TENURE_TWO_YEARS_AND_SIX_MONTHS = 30;
    const TENURE_THREE_YEARS = 36;
    const TENURE_THREE_YEARS_AND_SIX_MONTHS = 42;
    const TENURE_FOUR_YEARS = 48;
    const TENURE_FOUR_YEARS_AND_SIX_MONTHS = 54;
    const TENURE_FIVE_YEARS = 60;
    const TENURE_FIVE_YEARS_AND_SIX_MONTHS = 66;
    const TENURE_SIX_YEARS = 72;
    const TENURE_SIX_YEARS_AND_SIX_MONTHS = 78;
    const TENURE_SEVEN_YEARS = 84;
    const TENURE_SEVEN_YEARS_AND_SIX_MONTHS = 90;
    const TENURE_EIGHT_YEARS = 96;
    const TENURE_EIGHT_YEARS_AND_SIX_MONTHS = 102;
    const TENURE_NINE_YEARS = 108;
    const TENURE_NINE_YEARS_AND_SIX_MONTHS = 114;
    const TENURE_TEN_YEARS = 120;

    /**
     * Loan purpose
     */
    const PURPOSE_HOUSEHOLD_PURCHASE = 1;
    const PURPOSE_PAY_RENT = 2;
    const PURPOSE_GADGET_PURCHASE = 3;
    const PURPOSE_CAR_PURCHASE = 4;
    const PURPOSE_HOUSE_PURCHASE = 5;
    const PURPOSE_PAY_SCHOOL_FEES = 6;
    const PURPOSE_START_BUSINESS = 7;
    const PURPOSE_HEALTHCARE = 8;
    const PURPOSE_TRAVEL = 9;
    const PURPOSE_OTHERS = -1;

    public function getArray(bool $onlyFillable = false): array
    {
        $data = parent::getArray($onlyFillable);
        $data['amount'] = Item::cents($data['amount'])->getFactor();
        return $data; // TODO: Change the autogenerated stub
    }

    public function getUser(): ?\que\database\interfaces\model\Model
    {
        return $this->belongTo('users', 'user_id', 'id', 'userModel');
    }

    public function getStatusReadable() {
        return converter()->convertClassConst($this->getValue('status'), $this, "STATUS_");
    }

    public function isMine() {
        return $this->getInt('user_id') == user()->getInt('id');
    }

    public function getInterestTypeReadable() {
        return converter()->convertClassConst($this->getInt('interest_type'), $this, "INTEREST_TYPE_");
    }

    public function getTenureReadable() {
        return converter()->convertClassConst($this->getInt('tenure'), $this, "TENURE_");
    }

    public function getPurposeReadable() {
        return converter()->convertClassConst($this->getInt('purpose'), $this, "PURPOSE_");
    }

    public function getLoanTypeReadable() {
        return converter()->convertClassConst($this->getInt('loan_type'), $this, "LOAN_TYPE_");
    }

    public function getTransaction() {
        return $this->hasOne("transactions", 'gateway_reference', 'uuid', 'transactionModel');
    }

    public function getHasApplied() {
        $loan_id = $this->getValue('uuid');
        if (!isset(Loan::$applied[$loan_id])) {
            $application = db()->find('loan_applications', $loan_id, 'loan_id', function (Builder $builder) {
                $builder->where('user_id', user('id'));
                $builder->where('is_active', true);
            });
            Loan::$applied[$loan_id] = $application->isSuccessful();
        }
        return Loan::$applied[$loan_id];
    }

    public function isGranted() {
        $loan_id = $this->getValue('uuid');
        if (!isset(Loan::$granted[$loan_id])) {
            $application = db()->find('loan_applications', $loan_id, 'loan_id', function (Builder $builder) {
                $builder->where('status', [LoanApplication::STATUS_GRANTED, LoanApplication::STATUS_REPAID]);
                $builder->where('is_active', true);
            });
            Loan::$granted[$loan_id] = $application->isSuccessful();
        }
        return Loan::$granted[$loan_id];
    }

    public function getApprovedApplicant() {
        $applications = $this->hasMany('loan_applications', 'loan_id', 'uuid', 'loanApplicationModel');
        return $applications->find(function (\que\database\interfaces\model\Model $model) {
            return $model->getBool('is_active') && ($model->getInt('status') == LoanApplication::STATUS_GRANTED ||
                    $model->getInt('status') == LoanApplication::STATUS_REPAID);
        });
    }

    public function getAbsoluteTenure() {
        $tenure = $this->getInt('tenure');
        if ($tenure < Loan::TENURE_ONE_MONTH) {
            if ($tenure == Loan::TENURE_ONE_WEEK) {
                $tenure = (1 / 4);
            } elseif ($tenure == Loan::TENURE_TWO_WEEKS) {
                $tenure = ((1 / 4) * 2);
            } elseif ($tenure == Loan::TENURE_THREE_WEEKS) {
                $tenure = ((1 / 4) * 3);
            }
        }
        return $tenure;
    }

    /**
     * @param int $tenure
     * @return string
     */
    #[Pure] public static function getLoanDueDate(int $tenure): string
    {
        switch ($tenure) {
            case self::TENURE_ONE_WEEK:
                $date = strtotime('+1 week');
                break;
            case self::TENURE_TWO_WEEKS:
                $date = strtotime('+2 weeks');
                break;
            case self::TENURE_THREE_WEEKS:
                $date = strtotime('+3 weeks');
                break;
            case self::TENURE_ONE_MONTH:
                $date = strtotime('+1 month');
                break;
            case self::TENURE_TWO_MONTHS:
                $date = strtotime('+2 months');
                break;
            case self::TENURE_THREE_MONTHS:
                $date = strtotime('+3 months');
                break;
            case self::TENURE_FOUR_MONTHS:
                $date = strtotime('+4 months');
                break;
            case self::TENURE_FIVE_MONTHS:
                $date = strtotime('+5 months');
                break;
            case self::TENURE_SIX_MONTHS:
                $date = strtotime('+6 months');
                break;
            case self::TENURE_SEVEN_MONTHS:
                $date = strtotime('+7 months');
                break;
            case self::TENURE_EIGHT_MONTHS:
                $date = strtotime('+8 months');
                break;
            case self::TENURE_NINE_MONTHS:
                $date = strtotime('+9 months');
                break;
            case self::TENURE_TEN_MONTHS:
                $date = strtotime('+10 months');
                break;
            case self::TENURE_ELEVEN_MONTHS:
                $date = strtotime('+11 months');
                break;
            case self::TENURE_ONE_YEAR:
                $date = strtotime('+1 year');
                break;
            case self::TENURE_ONE_YEAR_AND_SIX_MONTHS:
                $date = strtotime('+1 year');
                $date = strtotime('+6 months', $date);
                break;
            case self::TENURE_TWO_YEARS:
                $date = strtotime('+2 years');
                break;
            case self::TENURE_TWO_YEARS_AND_SIX_MONTHS:
                $date = strtotime('+2 years');
                $date = strtotime('+6 months', $date);
                break;
            case self::TENURE_THREE_YEARS:
                $date = strtotime('+3 years');
                break;
            case self::TENURE_THREE_YEARS_AND_SIX_MONTHS:
                $date = strtotime('+3 years');
                $date = strtotime('+6 months', $date);
                break;
            case self::TENURE_FOUR_YEARS:
                $date = strtotime('+4 years');
                break;
            case self::TENURE_FOUR_YEARS_AND_SIX_MONTHS:
                $date = strtotime('+4 years');
                $date = strtotime('+6 months', $date);
                break;
            case self::TENURE_FIVE_YEARS:
                $date = strtotime('+5 years');
                break;
            case self::TENURE_FIVE_YEARS_AND_SIX_MONTHS:
                $date = strtotime('+5 years');
                $date = strtotime('+6 months', $date);
                break;
            case self::TENURE_SIX_YEARS:
                $date = strtotime('+6 years');
                break;
            case self::TENURE_SIX_YEARS_AND_SIX_MONTHS:
                $date = strtotime('+6 years');
                $date = strtotime('+6 months', $date);
                break;
            case self::TENURE_SEVEN_YEARS:
                $date = strtotime('+7 years');
                break;
            case self::TENURE_SEVEN_YEARS_AND_SIX_MONTHS:
                $date = strtotime('+7 years');
                $date = strtotime('+6 months', $date);
                break;
            case self::TENURE_EIGHT_YEARS:
                $date = strtotime('+8 years');
                break;
            case self::TENURE_EIGHT_YEARS_AND_SIX_MONTHS:
                $date = strtotime('+8 years');
                $date = strtotime('+6 months', $date);
                break;
            case self::TENURE_NINE_YEARS:
                $date = strtotime('+9 years');
                break;
            case self::TENURE_NINE_YEARS_AND_SIX_MONTHS:
                $date = strtotime('+9 years');
                $date = strtotime('+6 months', $date);
                break;
            case self::TENURE_TEN_YEARS:
                $date = strtotime('+10 years');
                break;
            default:
                $date = strtotime('+1 day');
                break;
        }
        return date(DATE_FORMAT_MYSQL, $date);
    }

}
