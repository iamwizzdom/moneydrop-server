<?php
/**
 * Created by PhpStorm.
 * User: Wisdom Emenike
 * Date: 5/9/2020
 * Time: 7:20 PM
 */

namespace model;

use que\database\model\Model;
use que\utility\money\Item;

class Transaction extends Model
{
    const TRANSFER_5K_FEE = 1500;
    const TRANSFER_50K_FEE = 3000;
    const TRANSFER_51K_FEE = 6000;
    const BVN_RESOLVE_STANDARD_FEE = 1000;
    const BVN_RESOLVE_PREMIUM_FEE = 1500;
    const BVN_MATCH_FEE = 1500;
    const ACCOUNT_DETAIL_RETRIEVAL_FEE = 1000;

    const TRANS_TYPE_TRANSFER = TRANSACTION_TRANSFER;
    const TRANS_TYPE_CHARGE = TRANSACTION_CHARGE;
    const TRANS_TYPE_TOP_UP = TRANSACTION_TOP_UP;
    const TRANS_TYPE_WITHDRAWAL = TRANSACTION_WITHDRAWAL;

    const TRANS_STATUS_FAILED = APPROVAL_FAILED;
    const TRANS_STATUS_PENDING = APPROVAL_PENDING;
    const TRANS_STATUS_SUCCESSFUL = APPROVAL_SUCCESSFUL;
    const TRANS_STATUS_PROCESSING = APPROVAL_PROCESSING;
    const TRANS_STATUS_REVERSED = APPROVAL_REVERSED;

    protected string $modelKey = 'transactionModel';
    protected array $fillable = ['uuid', 'user_id', 'card_id', 'to_wallet_id', 'from_wallet_id', 'recipient_code', 'direction',
        'type', 'gateway_reference', 'transfer_code', 'amount', 'fee', 'creditor_fee', 'currency', 'status', 'narration'];
    protected array $appends = ['card', 'status_readable', 'type_readable', 'direction_readable', 'date', 'date_time'];
    protected array $casts = ['narration' => 'string', 'fee' => 'double', 'creditor_fee' => 'double'];
    protected array $hidden = ['updated_at'];

    public function getArray(bool $onlyFillable = false): array
    {
        $data = parent::getArray($onlyFillable);
        $data['amount'] = Item::cents($data['amount'])->getFactor();
        $data['fee'] = Item::cents($data['fee'])->getFactor();
        $data['creditor_fee'] = Item::cents($data['creditor_fee'])->getFactor();
        return $data; // TODO: Change the autogenerated stub
    }

    public function getUser(): ?\que\database\interfaces\model\Model
    {
        return $this->belongTo('users', 'user_id', 'id', 'userModel');
    }

    public function getCard(): ?\que\database\interfaces\model\Model
    {
        return $this->belongTo('cards', 'card_id', 'uuid', 'cardModel');
    }

    public function getToWallet(): ?\que\database\interfaces\model\Model
    {
        return $this->belongTo('wallets', 'to_wallet_id', 'id', 'walletModel');
    }

    public function getFromWallet(): ?\que\database\interfaces\model\Model
    {
        return $this->belongTo('wallets', 'from_wallet_id', 'id', 'walletModel');
    }

    public function getStatusReadable() {
        $status = converter()->convertClassConst($this->getInt('status'), $this, 'TRANS_STATUS_');
        return ucfirst(strtolower($status));
    }

    public function getTypeReadable() {
        $type = converter()->convertClassConst($this->getInt('type'), $this, 'TRANS_TYPE_');
        return ucfirst(str_replace("_", "-", $type));
    }

    public function getDirectionReadable() {
        switch ($this->getValue('direction')) {
            case 'w2w':
                return "Wallet to wallet";
            case 'w2b':
                return "Wallet to bank";
            case 'b2w':
                return "Bank to wallet";
            case 'w2s':
                return "Wallet to system";
            case 's2w':
                return "System to wallet";
            default:
                return "Unknown";
        }
    }

    public function getDate() {
        $date = $this->getValue('created_at');
        return $date ? get_date("d/m/y", $date) : $date;
    }

    public function getDateTime() {
        $date = $this->getValue('created_at');
        return $date ? get_date("jS, M 'y h:i A", $date) : $date;
    }

}
